// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"core/internal/conf"
	"core/pkg/leads/biz"
	"core/pkg/leads/data"
	"core/pkg/leads/server"
	"core/pkg/leads/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(server *conf.Server, data *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	leads_dataData, cleanup, err := leads_data.NewData(data, logger)
	if err != nil {
		return nil, nil, err
	}
	leadRepo := leads_data.NewLeadRepo(leads_dataData, logger)
	leadAction := leads_biz.NewLeadAction(leadRepo, logger)
	leadService := leads_service.NewLeadService(leadAction)
	companyRepo := leads_data.NewCompanyRepo(leads_dataData, logger)
	companyAction := leads_biz.NewCompanyAction(companyRepo, logger)
	companyService := leads_service.NewCompanyService(companyAction)
	grpcServer := leads_server.NewLeadGrpcServer(server, logger, leadService, companyService)
	httpServer := leads_server.NewLeadHTTPServer(server, logger, leadService, companyService)
	app := newB2bApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
