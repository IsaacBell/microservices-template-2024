// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"microservices-template-2024/internal/conf"
	"microservices-template-2024/pkg/finance/biz"
	"microservices-template-2024/pkg/finance/data"
	"microservices-template-2024/pkg/finance/server"
	"microservices-template-2024/pkg/finance/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(server *conf.Server, data *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	finance_dataData, cleanup, err := finance_data.NewData(data, logger)
	if err != nil {
		return nil, nil, err
	}
	stockQuoteRepo := finance_data.NewStockQuoteRepo(finance_dataData, logger)
	stockQuoteAction := finance_biz.NewStockQuoteAction(stockQuoteRepo, logger)
	financeService := finance_service.NewFinanceService(stockQuoteAction)
	grpcServer := finance_server.NewFinanceGrpcServer(server, logger, financeService)
	httpServer := finance_server.NewFinanceHTTPServer(server, logger, financeService)
	app := newFinanceApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
