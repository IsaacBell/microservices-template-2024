// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: v1/lodging/lodging.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Lodging_CreateLodging_FullMethodName = "/api.v1.lodging.Lodging/CreateLodging"
	Lodging_UpdateLodging_FullMethodName = "/api.v1.lodging.Lodging/UpdateLodging"
	Lodging_DeleteLodging_FullMethodName = "/api.v1.lodging.Lodging/DeleteLodging"
	Lodging_GetLodging_FullMethodName    = "/api.v1.lodging.Lodging/GetLodging"
	Lodging_ListLodging_FullMethodName   = "/api.v1.lodging.Lodging/ListLodging"
	Lodging_SearchLodging_FullMethodName = "/api.v1.lodging.Lodging/SearchLodging"
	Lodging_RealtorStats_FullMethodName  = "/api.v1.lodging.Lodging/RealtorStats"
)

// LodgingClient is the client API for Lodging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LodgingClient interface {
	CreateLodging(ctx context.Context, in *CreateLodgingRequest, opts ...grpc.CallOption) (*CreateLodgingReply, error)
	UpdateLodging(ctx context.Context, in *UpdateLodgingRequest, opts ...grpc.CallOption) (*UpdateLodgingReply, error)
	DeleteLodging(ctx context.Context, in *DeleteLodgingRequest, opts ...grpc.CallOption) (*DeleteLodgingReply, error)
	GetLodging(ctx context.Context, in *GetLodgingRequest, opts ...grpc.CallOption) (*GetLodgingReply, error)
	ListLodging(ctx context.Context, in *ListLodgingRequest, opts ...grpc.CallOption) (*ListLodgingReply, error)
	SearchLodging(ctx context.Context, in *SearchLodgingRequest, opts ...grpc.CallOption) (*SearchLodgingReply, error)
	RealtorStats(ctx context.Context, in *RealtorStatsRequest, opts ...grpc.CallOption) (*RealtorStatsReply, error)
}

type lodgingClient struct {
	cc grpc.ClientConnInterface
}

func NewLodgingClient(cc grpc.ClientConnInterface) LodgingClient {
	return &lodgingClient{cc}
}

func (c *lodgingClient) CreateLodging(ctx context.Context, in *CreateLodgingRequest, opts ...grpc.CallOption) (*CreateLodgingReply, error) {
	out := new(CreateLodgingReply)
	err := c.cc.Invoke(ctx, Lodging_CreateLodging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodgingClient) UpdateLodging(ctx context.Context, in *UpdateLodgingRequest, opts ...grpc.CallOption) (*UpdateLodgingReply, error) {
	out := new(UpdateLodgingReply)
	err := c.cc.Invoke(ctx, Lodging_UpdateLodging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodgingClient) DeleteLodging(ctx context.Context, in *DeleteLodgingRequest, opts ...grpc.CallOption) (*DeleteLodgingReply, error) {
	out := new(DeleteLodgingReply)
	err := c.cc.Invoke(ctx, Lodging_DeleteLodging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodgingClient) GetLodging(ctx context.Context, in *GetLodgingRequest, opts ...grpc.CallOption) (*GetLodgingReply, error) {
	out := new(GetLodgingReply)
	err := c.cc.Invoke(ctx, Lodging_GetLodging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodgingClient) ListLodging(ctx context.Context, in *ListLodgingRequest, opts ...grpc.CallOption) (*ListLodgingReply, error) {
	out := new(ListLodgingReply)
	err := c.cc.Invoke(ctx, Lodging_ListLodging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodgingClient) SearchLodging(ctx context.Context, in *SearchLodgingRequest, opts ...grpc.CallOption) (*SearchLodgingReply, error) {
	out := new(SearchLodgingReply)
	err := c.cc.Invoke(ctx, Lodging_SearchLodging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodgingClient) RealtorStats(ctx context.Context, in *RealtorStatsRequest, opts ...grpc.CallOption) (*RealtorStatsReply, error) {
	out := new(RealtorStatsReply)
	err := c.cc.Invoke(ctx, Lodging_RealtorStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LodgingServer is the server API for Lodging service.
// All implementations must embed UnimplementedLodgingServer
// for forward compatibility
type LodgingServer interface {
	CreateLodging(context.Context, *CreateLodgingRequest) (*CreateLodgingReply, error)
	UpdateLodging(context.Context, *UpdateLodgingRequest) (*UpdateLodgingReply, error)
	DeleteLodging(context.Context, *DeleteLodgingRequest) (*DeleteLodgingReply, error)
	GetLodging(context.Context, *GetLodgingRequest) (*GetLodgingReply, error)
	ListLodging(context.Context, *ListLodgingRequest) (*ListLodgingReply, error)
	SearchLodging(context.Context, *SearchLodgingRequest) (*SearchLodgingReply, error)
	RealtorStats(context.Context, *RealtorStatsRequest) (*RealtorStatsReply, error)
	mustEmbedUnimplementedLodgingServer()
}

// UnimplementedLodgingServer must be embedded to have forward compatible implementations.
type UnimplementedLodgingServer struct {
}

func (UnimplementedLodgingServer) CreateLodging(context.Context, *CreateLodgingRequest) (*CreateLodgingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLodging not implemented")
}
func (UnimplementedLodgingServer) UpdateLodging(context.Context, *UpdateLodgingRequest) (*UpdateLodgingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLodging not implemented")
}
func (UnimplementedLodgingServer) DeleteLodging(context.Context, *DeleteLodgingRequest) (*DeleteLodgingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLodging not implemented")
}
func (UnimplementedLodgingServer) GetLodging(context.Context, *GetLodgingRequest) (*GetLodgingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLodging not implemented")
}
func (UnimplementedLodgingServer) ListLodging(context.Context, *ListLodgingRequest) (*ListLodgingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLodging not implemented")
}
func (UnimplementedLodgingServer) SearchLodging(context.Context, *SearchLodgingRequest) (*SearchLodgingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLodging not implemented")
}
func (UnimplementedLodgingServer) RealtorStats(context.Context, *RealtorStatsRequest) (*RealtorStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealtorStats not implemented")
}
func (UnimplementedLodgingServer) mustEmbedUnimplementedLodgingServer() {}

// UnsafeLodgingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LodgingServer will
// result in compilation errors.
type UnsafeLodgingServer interface {
	mustEmbedUnimplementedLodgingServer()
}

func RegisterLodgingServer(s grpc.ServiceRegistrar, srv LodgingServer) {
	s.RegisterService(&Lodging_ServiceDesc, srv)
}

func _Lodging_CreateLodging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLodgingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodgingServer).CreateLodging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lodging_CreateLodging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodgingServer).CreateLodging(ctx, req.(*CreateLodgingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodging_UpdateLodging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLodgingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodgingServer).UpdateLodging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lodging_UpdateLodging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodgingServer).UpdateLodging(ctx, req.(*UpdateLodgingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodging_DeleteLodging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLodgingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodgingServer).DeleteLodging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lodging_DeleteLodging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodgingServer).DeleteLodging(ctx, req.(*DeleteLodgingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodging_GetLodging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLodgingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodgingServer).GetLodging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lodging_GetLodging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodgingServer).GetLodging(ctx, req.(*GetLodgingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodging_ListLodging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLodgingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodgingServer).ListLodging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lodging_ListLodging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodgingServer).ListLodging(ctx, req.(*ListLodgingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodging_SearchLodging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLodgingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodgingServer).SearchLodging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lodging_SearchLodging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodgingServer).SearchLodging(ctx, req.(*SearchLodgingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodging_RealtorStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealtorStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodgingServer).RealtorStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lodging_RealtorStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodgingServer).RealtorStats(ctx, req.(*RealtorStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lodging_ServiceDesc is the grpc.ServiceDesc for Lodging service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lodging_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.lodging.Lodging",
	HandlerType: (*LodgingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLodging",
			Handler:    _Lodging_CreateLodging_Handler,
		},
		{
			MethodName: "UpdateLodging",
			Handler:    _Lodging_UpdateLodging_Handler,
		},
		{
			MethodName: "DeleteLodging",
			Handler:    _Lodging_DeleteLodging_Handler,
		},
		{
			MethodName: "GetLodging",
			Handler:    _Lodging_GetLodging_Handler,
		},
		{
			MethodName: "ListLodging",
			Handler:    _Lodging_ListLodging_Handler,
		},
		{
			MethodName: "SearchLodging",
			Handler:    _Lodging_SearchLodging_Handler,
		},
		{
			MethodName: "RealtorStats",
			Handler:    _Lodging_RealtorStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/lodging/lodging.proto",
}
