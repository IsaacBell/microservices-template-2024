// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: v1/finance.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StockQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price         float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Change        float64 `protobuf:"fixed64,2,opt,name=change,proto3" json:"change,omitempty"`
	PercentChange float64 `protobuf:"fixed64,3,opt,name=percent_change,json=percentChange,proto3" json:"percent_change,omitempty"`
	High          float64 `protobuf:"fixed64,4,opt,name=high,proto3" json:"high,omitempty"`
	Low           float64 `protobuf:"fixed64,5,opt,name=low,proto3" json:"low,omitempty"`
	Open          float64 `protobuf:"fixed64,6,opt,name=open,proto3" json:"open,omitempty"`
	LastClose     float64 `protobuf:"fixed64,7,opt,name=last_close,json=lastClose,proto3" json:"last_close,omitempty"`
	Symbol        string  `protobuf:"bytes,8,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *StockQuote) Reset() {
	*x = StockQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQuote) ProtoMessage() {}

func (x *StockQuote) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQuote.ProtoReflect.Descriptor instead.
func (*StockQuote) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{0}
}

func (x *StockQuote) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StockQuote) GetChange() float64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *StockQuote) GetPercentChange() float64 {
	if x != nil {
		return x.PercentChange
	}
	return 0
}

func (x *StockQuote) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockQuote) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockQuote) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockQuote) GetLastClose() float64 {
	if x != nil {
		return x.LastClose
	}
	return 0
}

func (x *StockQuote) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetStockQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"` // symbol, name, isin, or cusip
}

func (x *GetStockQuoteRequest) Reset() {
	*x = GetStockQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockQuoteRequest) ProtoMessage() {}

func (x *GetStockQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockQuoteRequest.ProtoReflect.Descriptor instead.
func (*GetStockQuoteRequest) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{1}
}

func (x *GetStockQuoteRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetStockQuoteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string      `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Quote  *StockQuote `protobuf:"bytes,2,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (x *GetStockQuoteReply) Reset() {
	*x = GetStockQuoteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockQuoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockQuoteReply) ProtoMessage() {}

func (x *GetStockQuoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockQuoteReply.ProtoReflect.Descriptor instead.
func (*GetStockQuoteReply) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{2}
}

func (x *GetStockQuoteReply) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetStockQuoteReply) GetQuote() *StockQuote {
	if x != nil {
		return x.Quote
	}
	return nil
}

type GetUSASpendingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"` // Symbol (required)
	From   string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`     // From date YYYY-MM-DD (required), filter for actionDate
	To     string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`         // To date YYYY-MM-DD (required), filter for actionDate
}

func (x *GetUSASpendingRequest) Reset() {
	*x = GetUSASpendingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUSASpendingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUSASpendingRequest) ProtoMessage() {}

func (x *GetUSASpendingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUSASpendingRequest.ProtoReflect.Descriptor instead.
func (*GetUSASpendingRequest) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{3}
}

func (x *GetUSASpendingRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetUSASpendingRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetUSASpendingRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type GetUSASpendingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []*USASpendingData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`     // Array of government's spending data points
	Symbol string             `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"` // Symbol
}

func (x *GetUSASpendingReply) Reset() {
	*x = GetUSASpendingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUSASpendingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUSASpendingReply) ProtoMessage() {}

func (x *GetUSASpendingReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUSASpendingReply.ProtoReflect.Descriptor instead.
func (*GetUSASpendingReply) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{4}
}

func (x *GetUSASpendingReply) GetData() []*USASpendingData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetUSASpendingReply) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type USASpendingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol                           string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                                                // Symbol
	RecipientName                    string  `protobuf:"bytes,2,opt,name=recipient_name,json=recipientName,proto3" json:"recipient_name,omitempty"`                                                             // Company's name
	RecipientParentName              string  `protobuf:"bytes,3,opt,name=recipient_parent_name,json=recipientParentName,proto3" json:"recipient_parent_name,omitempty"`                                         // Company's parent name
	Country                          string  `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`                                                                                              // Recipient's country
	TotalValue                       float64 `protobuf:"fixed64,5,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`                                                                    // Income reported by lobbying firms
	ActionDate                       string  `protobuf:"bytes,6,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`                                                                      // Period
	PerformanceStartDate             string  `protobuf:"bytes,7,opt,name=performance_start_date,json=performanceStartDate,proto3" json:"performance_start_date,omitempty"`                                      // Performance start date
	PerformanceEndDate               string  `protobuf:"bytes,8,opt,name=performance_end_date,json=performanceEndDate,proto3" json:"performance_end_date,omitempty"`                                            // Performance end date
	AwardingAgencyName               string  `protobuf:"bytes,9,opt,name=awarding_agency_name,json=awardingAgencyName,proto3" json:"awarding_agency_name,omitempty"`                                            // Award agency
	AwardingSubAgencyName            string  `protobuf:"bytes,10,opt,name=awarding_sub_agency_name,json=awardingSubAgencyName,proto3" json:"awarding_sub_agency_name,omitempty"`                                // Award sub-agency
	AwardingOfficeName               string  `protobuf:"bytes,11,opt,name=awarding_office_name,json=awardingOfficeName,proto3" json:"awarding_office_name,omitempty"`                                           // Award office name
	PerformanceCountry               string  `protobuf:"bytes,12,opt,name=performance_country,json=performanceCountry,proto3" json:"performance_country,omitempty"`                                             // Performance country
	PerformanceCity                  string  `protobuf:"bytes,13,opt,name=performance_city,json=performanceCity,proto3" json:"performance_city,omitempty"`                                                      // Performance city
	PerformanceCounty                string  `protobuf:"bytes,14,opt,name=performance_county,json=performanceCounty,proto3" json:"performance_county,omitempty"`                                                // Performance county
	PerformanceState                 string  `protobuf:"bytes,15,opt,name=performance_state,json=performanceState,proto3" json:"performance_state,omitempty"`                                                   // Performance state
	PerformanceZipCode               string  `protobuf:"bytes,16,opt,name=performance_zip_code,json=performanceZipCode,proto3" json:"performance_zip_code,omitempty"`                                           // Performance zip code
	PerformanceCongressionalDistrict string  `protobuf:"bytes,17,opt,name=performance_congressional_district,json=performanceCongressionalDistrict,proto3" json:"performance_congressional_district,omitempty"` // Performance congressional district
	AwardDescription                 string  `protobuf:"bytes,18,opt,name=award_description,json=awardDescription,proto3" json:"award_description,omitempty"`                                                   // Description
	NaicsCode                        string  `protobuf:"bytes,19,opt,name=naics_code,json=naicsCode,proto3" json:"naics_code,omitempty"`                                                                        // NAICS code
	Permalink                        string  `protobuf:"bytes,20,opt,name=permalink,proto3" json:"permalink,omitempty"`                                                                                         // Permalink
}

func (x *USASpendingData) Reset() {
	*x = USASpendingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USASpendingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USASpendingData) ProtoMessage() {}

func (x *USASpendingData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USASpendingData.ProtoReflect.Descriptor instead.
func (*USASpendingData) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{5}
}

func (x *USASpendingData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *USASpendingData) GetRecipientName() string {
	if x != nil {
		return x.RecipientName
	}
	return ""
}

func (x *USASpendingData) GetRecipientParentName() string {
	if x != nil {
		return x.RecipientParentName
	}
	return ""
}

func (x *USASpendingData) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *USASpendingData) GetTotalValue() float64 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

func (x *USASpendingData) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *USASpendingData) GetPerformanceStartDate() string {
	if x != nil {
		return x.PerformanceStartDate
	}
	return ""
}

func (x *USASpendingData) GetPerformanceEndDate() string {
	if x != nil {
		return x.PerformanceEndDate
	}
	return ""
}

func (x *USASpendingData) GetAwardingAgencyName() string {
	if x != nil {
		return x.AwardingAgencyName
	}
	return ""
}

func (x *USASpendingData) GetAwardingSubAgencyName() string {
	if x != nil {
		return x.AwardingSubAgencyName
	}
	return ""
}

func (x *USASpendingData) GetAwardingOfficeName() string {
	if x != nil {
		return x.AwardingOfficeName
	}
	return ""
}

func (x *USASpendingData) GetPerformanceCountry() string {
	if x != nil {
		return x.PerformanceCountry
	}
	return ""
}

func (x *USASpendingData) GetPerformanceCity() string {
	if x != nil {
		return x.PerformanceCity
	}
	return ""
}

func (x *USASpendingData) GetPerformanceCounty() string {
	if x != nil {
		return x.PerformanceCounty
	}
	return ""
}

func (x *USASpendingData) GetPerformanceState() string {
	if x != nil {
		return x.PerformanceState
	}
	return ""
}

func (x *USASpendingData) GetPerformanceZipCode() string {
	if x != nil {
		return x.PerformanceZipCode
	}
	return ""
}

func (x *USASpendingData) GetPerformanceCongressionalDistrict() string {
	if x != nil {
		return x.PerformanceCongressionalDistrict
	}
	return ""
}

func (x *USASpendingData) GetAwardDescription() string {
	if x != nil {
		return x.AwardDescription
	}
	return ""
}

func (x *USASpendingData) GetNaicsCode() string {
	if x != nil {
		return x.NaicsCode
	}
	return ""
}

func (x *USASpendingData) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

type GetSenateLobbyingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"` // Symbol (required)
	From   string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`     // From date YYYY-MM-DD (required)
	To     string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`         // To date YYYY-MM-DD (required)
}

func (x *GetSenateLobbyingRequest) Reset() {
	*x = GetSenateLobbyingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSenateLobbyingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSenateLobbyingRequest) ProtoMessage() {}

func (x *GetSenateLobbyingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSenateLobbyingRequest.ProtoReflect.Descriptor instead.
func (*GetSenateLobbyingRequest) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{6}
}

func (x *GetSenateLobbyingRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetSenateLobbyingRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetSenateLobbyingRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type GetSenateLobbyingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []*SenateLobbyingData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`     // Array of lobbying activities
	Symbol string                `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"` // Symbol
}

func (x *GetSenateLobbyingReply) Reset() {
	*x = GetSenateLobbyingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSenateLobbyingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSenateLobbyingReply) ProtoMessage() {}

func (x *GetSenateLobbyingReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSenateLobbyingReply.ProtoReflect.Descriptor instead.
func (*GetSenateLobbyingReply) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{7}
}

func (x *GetSenateLobbyingReply) GetData() []*SenateLobbyingData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSenateLobbyingReply) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type SenateLobbyingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId          string  `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`                              // Client ID
	Country           string  `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`                                                // Country
	Date              string  `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`                                                      // Date
	Description       string  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                        // Description
	DocumentUrl       string  `protobuf:"bytes,5,opt,name=document_url,json=documentUrl,proto3" json:"document_url,omitempty"`                     // Document's URL
	Expenses          float64 `protobuf:"fixed64,6,opt,name=expenses,proto3" json:"expenses,omitempty"`                                            // Expenses reported by the company
	HouseRegistrantId string  `protobuf:"bytes,7,opt,name=house_registrant_id,json=houseRegistrantId,proto3" json:"house_registrant_id,omitempty"` // House registrant ID
	Income            float64 `protobuf:"fixed64,8,opt,name=income,proto3" json:"income,omitempty"`                                                // Income reported by lobbying firms
	Name              string  `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                                                      // Company's name
	Period            string  `protobuf:"bytes,10,opt,name=period,proto3" json:"period,omitempty"`                                                 // Period
	PostedName        string  `protobuf:"bytes,11,opt,name=posted_name,json=postedName,proto3" json:"posted_name,omitempty"`                       // Posted name
	RegistrantId      string  `protobuf:"bytes,12,opt,name=registrant_id,json=registrantId,proto3" json:"registrant_id,omitempty"`                 // Registrant ID
	SenateId          string  `protobuf:"bytes,13,opt,name=senate_id,json=senateId,proto3" json:"senate_id,omitempty"`                             // Senate ID
	Symbol            string  `protobuf:"bytes,14,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                 // Symbol
	Year              int32   `protobuf:"varint,15,opt,name=year,proto3" json:"year,omitempty"`                                                    // Year
}

func (x *SenateLobbyingData) Reset() {
	*x = SenateLobbyingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenateLobbyingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenateLobbyingData) ProtoMessage() {}

func (x *SenateLobbyingData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenateLobbyingData.ProtoReflect.Descriptor instead.
func (*SenateLobbyingData) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{8}
}

func (x *SenateLobbyingData) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SenateLobbyingData) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SenateLobbyingData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *SenateLobbyingData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SenateLobbyingData) GetDocumentUrl() string {
	if x != nil {
		return x.DocumentUrl
	}
	return ""
}

func (x *SenateLobbyingData) GetExpenses() float64 {
	if x != nil {
		return x.Expenses
	}
	return 0
}

func (x *SenateLobbyingData) GetHouseRegistrantId() string {
	if x != nil {
		return x.HouseRegistrantId
	}
	return ""
}

func (x *SenateLobbyingData) GetIncome() float64 {
	if x != nil {
		return x.Income
	}
	return 0
}

func (x *SenateLobbyingData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SenateLobbyingData) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *SenateLobbyingData) GetPostedName() string {
	if x != nil {
		return x.PostedName
	}
	return ""
}

func (x *SenateLobbyingData) GetRegistrantId() string {
	if x != nil {
		return x.RegistrantId
	}
	return ""
}

func (x *SenateLobbyingData) GetSenateId() string {
	if x != nil {
		return x.SenateId
	}
	return ""
}

func (x *SenateLobbyingData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SenateLobbyingData) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type SyncTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *SyncTradesRequest) Reset() {
	*x = SyncTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTradesRequest) ProtoMessage() {}

func (x *SyncTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTradesRequest.ProtoReflect.Descriptor instead.
func (*SyncTradesRequest) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{9}
}

func (x *SyncTradesRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type SyncTradesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncTradesReply) Reset() {
	*x = SyncTradesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTradesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTradesReply) ProtoMessage() {}

func (x *SyncTradesReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTradesReply.ProtoReflect.Descriptor instead.
func (*SyncTradesReply) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{10}
}

type Stock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency       string  `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Description    string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DisplaySymbol  string  `protobuf:"bytes,3,opt,name=display_symbol,json=displaySymbol,proto3" json:"display_symbol,omitempty"`
	Figi           string  `protobuf:"bytes,4,opt,name=figi,proto3" json:"figi,omitempty"`
	Isin           *string `protobuf:"bytes,5,opt,name=isin,proto3,oneof" json:"isin,omitempty"`
	Mic            string  `protobuf:"bytes,6,opt,name=mic,proto3" json:"mic,omitempty"`
	ShareClassFigi *string `protobuf:"bytes,7,opt,name=share_class_figi,json=shareClassFigi,proto3,oneof" json:"share_class_figi,omitempty"`
	Symbol         string  `protobuf:"bytes,8,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Symbol2        *string `protobuf:"bytes,9,opt,name=symbol2,proto3,oneof" json:"symbol2,omitempty"`
	Type           string  `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Stock) Reset() {
	*x = Stock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_finance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stock) ProtoMessage() {}

func (x *Stock) ProtoReflect() protoreflect.Message {
	mi := &file_v1_finance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stock.ProtoReflect.Descriptor instead.
func (*Stock) Descriptor() ([]byte, []int) {
	return file_v1_finance_proto_rawDescGZIP(), []int{11}
}

func (x *Stock) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Stock) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Stock) GetDisplaySymbol() string {
	if x != nil {
		return x.DisplaySymbol
	}
	return ""
}

func (x *Stock) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Stock) GetIsin() string {
	if x != nil && x.Isin != nil {
		return *x.Isin
	}
	return ""
}

func (x *Stock) GetMic() string {
	if x != nil {
		return x.Mic
	}
	return ""
}

func (x *Stock) GetShareClassFigi() string {
	if x != nil && x.ShareClassFigi != nil {
		return *x.ShareClassFigi
	}
	return ""
}

func (x *Stock) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Stock) GetSymbol2() string {
	if x != nil && x.Symbol2 != nil {
		return *x.Symbol2
	}
	return ""
}

func (x *Stock) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_v1_finance_proto protoreflect.FileDescriptor

var file_v1_finance_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x2e, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x56, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x53, 0x41, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x55, 0x53, 0x41, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x53, 0x41, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x87, 0x07, 0x0a, 0x0f, 0x55, 0x53, 0x41, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x62, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x22, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b,
	0x22, 0x56, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6e, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xc3, 0x03, 0x0a, 0x12, 0x53,
	0x65, 0x6e, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x22, 0x2b, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x11, 0x0a,
	0x0f, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0xcf, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x69, 0x67, 0x69, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x63, 0x12, 0x2d,
	0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x66, 0x69,
	0x67, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x46, 0x69, 0x67, 0x69, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x32,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x73, 0x69,
	0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x32, 0x32, 0x9f, 0x03, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x62,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x12, 0x0f, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2f, 0x7b, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x7d, 0x12, 0x72, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x53, 0x41, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x53, 0x41, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x53, 0x41, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x2f, 0x75, 0x73, 0x61, 0x2d, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x7b, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x7d, 0x12, 0x77, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x69, 0x6e, 0x67, 0x2f, 0x7b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x7d, 0x12,
	0x43, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x30, 0x01, 0x42, 0x1a, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x50, 0x01,
	0x5a, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_finance_proto_rawDescOnce sync.Once
	file_v1_finance_proto_rawDescData = file_v1_finance_proto_rawDesc
)

func file_v1_finance_proto_rawDescGZIP() []byte {
	file_v1_finance_proto_rawDescOnce.Do(func() {
		file_v1_finance_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_finance_proto_rawDescData)
	})
	return file_v1_finance_proto_rawDescData
}

var file_v1_finance_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_v1_finance_proto_goTypes = []interface{}{
	(*StockQuote)(nil),               // 0: api.v1.StockQuote
	(*GetStockQuoteRequest)(nil),     // 1: api.v1.GetStockQuoteRequest
	(*GetStockQuoteReply)(nil),       // 2: api.v1.GetStockQuoteReply
	(*GetUSASpendingRequest)(nil),    // 3: api.v1.GetUSASpendingRequest
	(*GetUSASpendingReply)(nil),      // 4: api.v1.GetUSASpendingReply
	(*USASpendingData)(nil),          // 5: api.v1.USASpendingData
	(*GetSenateLobbyingRequest)(nil), // 6: api.v1.GetSenateLobbyingRequest
	(*GetSenateLobbyingReply)(nil),   // 7: api.v1.GetSenateLobbyingReply
	(*SenateLobbyingData)(nil),       // 8: api.v1.SenateLobbyingData
	(*SyncTradesRequest)(nil),        // 9: api.v1.SyncTradesRequest
	(*SyncTradesReply)(nil),          // 10: api.v1.SyncTradesReply
	(*Stock)(nil),                    // 11: api.v1.Stock
}
var file_v1_finance_proto_depIdxs = []int32{
	0,  // 0: api.v1.GetStockQuoteReply.quote:type_name -> api.v1.StockQuote
	5,  // 1: api.v1.GetUSASpendingReply.data:type_name -> api.v1.USASpendingData
	8,  // 2: api.v1.GetSenateLobbyingReply.data:type_name -> api.v1.SenateLobbyingData
	1,  // 3: api.v1.Finance.GetStockQuote:input_type -> api.v1.GetStockQuoteRequest
	3,  // 4: api.v1.Finance.GetUSASpending:input_type -> api.v1.GetUSASpendingRequest
	6,  // 5: api.v1.Finance.GetSenateLobbying:input_type -> api.v1.GetSenateLobbyingRequest
	9,  // 6: api.v1.Finance.WatchTrades:input_type -> api.v1.SyncTradesRequest
	2,  // 7: api.v1.Finance.GetStockQuote:output_type -> api.v1.GetStockQuoteReply
	4,  // 8: api.v1.Finance.GetUSASpending:output_type -> api.v1.GetUSASpendingReply
	7,  // 9: api.v1.Finance.GetSenateLobbying:output_type -> api.v1.GetSenateLobbyingReply
	10, // 10: api.v1.Finance.WatchTrades:output_type -> api.v1.SyncTradesReply
	7,  // [7:11] is the sub-list for method output_type
	3,  // [3:7] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_v1_finance_proto_init() }
func file_v1_finance_proto_init() {
	if File_v1_finance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_finance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_finance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStockQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_finance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStockQuoteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_finance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUSASpendingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_finance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUSASpendingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_finance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USASpendingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_finance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSenateLobbyingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_finance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSenateLobbyingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_finance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenateLobbyingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_finance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_finance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncTradesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_finance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_finance_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_finance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_finance_proto_goTypes,
		DependencyIndexes: file_v1_finance_proto_depIdxs,
		MessageInfos:      file_v1_finance_proto_msgTypes,
	}.Build()
	File_v1_finance_proto = out.File
	file_v1_finance_proto_rawDesc = nil
	file_v1_finance_proto_goTypes = nil
	file_v1_finance_proto_depIdxs = nil
}
