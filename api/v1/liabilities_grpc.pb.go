// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: v1/liabilities.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Liabilities_GetLiability_FullMethodName   = "/api.v1.Liabilities/GetLiability"
	Liabilities_GetLiabilities_FullMethodName = "/api.v1.Liabilities/GetLiabilities"
)

// LiabilitiesClient is the client API for Liabilities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiabilitiesClient interface {
	GetLiability(ctx context.Context, in *GetLiabilityRequest, opts ...grpc.CallOption) (*GetLiabilityReply, error)
	GetLiabilities(ctx context.Context, in *GetLiabilitiesRequest, opts ...grpc.CallOption) (*GetLiabilitiesReply, error)
}

type liabilitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewLiabilitiesClient(cc grpc.ClientConnInterface) LiabilitiesClient {
	return &liabilitiesClient{cc}
}

func (c *liabilitiesClient) GetLiability(ctx context.Context, in *GetLiabilityRequest, opts ...grpc.CallOption) (*GetLiabilityReply, error) {
	out := new(GetLiabilityReply)
	err := c.cc.Invoke(ctx, Liabilities_GetLiability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liabilitiesClient) GetLiabilities(ctx context.Context, in *GetLiabilitiesRequest, opts ...grpc.CallOption) (*GetLiabilitiesReply, error) {
	out := new(GetLiabilitiesReply)
	err := c.cc.Invoke(ctx, Liabilities_GetLiabilities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiabilitiesServer is the server API for Liabilities service.
// All implementations must embed UnimplementedLiabilitiesServer
// for forward compatibility
type LiabilitiesServer interface {
	GetLiability(context.Context, *GetLiabilityRequest) (*GetLiabilityReply, error)
	GetLiabilities(context.Context, *GetLiabilitiesRequest) (*GetLiabilitiesReply, error)
	mustEmbedUnimplementedLiabilitiesServer()
}

// UnimplementedLiabilitiesServer must be embedded to have forward compatible implementations.
type UnimplementedLiabilitiesServer struct {
}

func (UnimplementedLiabilitiesServer) GetLiability(context.Context, *GetLiabilityRequest) (*GetLiabilityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiability not implemented")
}
func (UnimplementedLiabilitiesServer) GetLiabilities(context.Context, *GetLiabilitiesRequest) (*GetLiabilitiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiabilities not implemented")
}
func (UnimplementedLiabilitiesServer) mustEmbedUnimplementedLiabilitiesServer() {}

// UnsafeLiabilitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiabilitiesServer will
// result in compilation errors.
type UnsafeLiabilitiesServer interface {
	mustEmbedUnimplementedLiabilitiesServer()
}

func RegisterLiabilitiesServer(s grpc.ServiceRegistrar, srv LiabilitiesServer) {
	s.RegisterService(&Liabilities_ServiceDesc, srv)
}

func _Liabilities_GetLiability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiabilitiesServer).GetLiability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Liabilities_GetLiability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiabilitiesServer).GetLiability(ctx, req.(*GetLiabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Liabilities_GetLiabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiabilitiesServer).GetLiabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Liabilities_GetLiabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiabilitiesServer).GetLiabilities(ctx, req.(*GetLiabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Liabilities_ServiceDesc is the grpc.ServiceDesc for Liabilities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Liabilities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Liabilities",
	HandlerType: (*LiabilitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiability",
			Handler:    _Liabilities_GetLiability_Handler,
		},
		{
			MethodName: "GetLiabilities",
			Handler:    _Liabilities_GetLiabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/liabilities.proto",
}
