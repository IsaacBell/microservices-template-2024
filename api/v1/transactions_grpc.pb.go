// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: v1/transactions.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Transactions_CreateTransaction_FullMethodName = "/api.v1.Transactions/CreateTransaction"
	Transactions_UpdateTransaction_FullMethodName = "/api.v1.Transactions/UpdateTransaction"
	Transactions_DeleteTransaction_FullMethodName = "/api.v1.Transactions/DeleteTransaction"
	Transactions_GetTransaction_FullMethodName    = "/api.v1.Transactions/GetTransaction"
	Transactions_SyncTransactions_FullMethodName  = "/api.v1.Transactions/SyncTransactions"
	Transactions_ListTransactions_FullMethodName  = "/api.v1.Transactions/ListTransactions"
)

// TransactionsClient is the client API for Transactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsClient interface {
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionReply, error)
	UpdateTransaction(ctx context.Context, in *UpdateTransactionsRequest, opts ...grpc.CallOption) (*UpdateTransactionsReply, error)
	DeleteTransaction(ctx context.Context, in *DeleteTransactionsRequest, opts ...grpc.CallOption) (*DeleteTransactionsReply, error)
	GetTransaction(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsReply, error)
	SyncTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (Transactions_SyncTransactionsClient, error)
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsReply, error)
}

type transactionsClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsClient(cc grpc.ClientConnInterface) TransactionsClient {
	return &transactionsClient{cc}
}

func (c *transactionsClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionReply, error) {
	out := new(CreateTransactionReply)
	err := c.cc.Invoke(ctx, Transactions_CreateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionsRequest, opts ...grpc.CallOption) (*UpdateTransactionsReply, error) {
	out := new(UpdateTransactionsReply)
	err := c.cc.Invoke(ctx, Transactions_UpdateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) DeleteTransaction(ctx context.Context, in *DeleteTransactionsRequest, opts ...grpc.CallOption) (*DeleteTransactionsReply, error) {
	out := new(DeleteTransactionsReply)
	err := c.cc.Invoke(ctx, Transactions_DeleteTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) GetTransaction(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsReply, error) {
	out := new(GetTransactionsReply)
	err := c.cc.Invoke(ctx, Transactions_GetTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) SyncTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (Transactions_SyncTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transactions_ServiceDesc.Streams[0], Transactions_SyncTransactions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionsSyncTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transactions_SyncTransactionsClient interface {
	Recv() (*GetTransactionsReply, error)
	grpc.ClientStream
}

type transactionsSyncTransactionsClient struct {
	grpc.ClientStream
}

func (x *transactionsSyncTransactionsClient) Recv() (*GetTransactionsReply, error) {
	m := new(GetTransactionsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionsClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsReply, error) {
	out := new(ListTransactionsReply)
	err := c.cc.Invoke(ctx, Transactions_ListTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsServer is the server API for Transactions service.
// All implementations must embed UnimplementedTransactionsServer
// for forward compatibility
type TransactionsServer interface {
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionReply, error)
	UpdateTransaction(context.Context, *UpdateTransactionsRequest) (*UpdateTransactionsReply, error)
	DeleteTransaction(context.Context, *DeleteTransactionsRequest) (*DeleteTransactionsReply, error)
	GetTransaction(context.Context, *GetTransactionsRequest) (*GetTransactionsReply, error)
	SyncTransactions(*ListTransactionsRequest, Transactions_SyncTransactionsServer) error
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsReply, error)
	mustEmbedUnimplementedTransactionsServer()
}

// UnimplementedTransactionsServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionsServer struct {
}

func (UnimplementedTransactionsServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTransactionsServer) UpdateTransaction(context.Context, *UpdateTransactionsRequest) (*UpdateTransactionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedTransactionsServer) DeleteTransaction(context.Context, *DeleteTransactionsRequest) (*DeleteTransactionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransaction not implemented")
}
func (UnimplementedTransactionsServer) GetTransaction(context.Context, *GetTransactionsRequest) (*GetTransactionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedTransactionsServer) SyncTransactions(*ListTransactionsRequest, Transactions_SyncTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncTransactions not implemented")
}
func (UnimplementedTransactionsServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedTransactionsServer) mustEmbedUnimplementedTransactionsServer() {}

// UnsafeTransactionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsServer will
// result in compilation errors.
type UnsafeTransactionsServer interface {
	mustEmbedUnimplementedTransactionsServer()
}

func RegisterTransactionsServer(s grpc.ServiceRegistrar, srv TransactionsServer) {
	s.RegisterService(&Transactions_ServiceDesc, srv)
}

func _Transactions_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactions_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactions_UpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).UpdateTransaction(ctx, req.(*UpdateTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactions_DeleteTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).DeleteTransaction(ctx, req.(*DeleteTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactions_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).GetTransaction(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_SyncTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsServer).SyncTransactions(m, &transactionsSyncTransactionsServer{stream})
}

type Transactions_SyncTransactionsServer interface {
	Send(*GetTransactionsReply) error
	grpc.ServerStream
}

type transactionsSyncTransactionsServer struct {
	grpc.ServerStream
}

func (x *transactionsSyncTransactionsServer) Send(m *GetTransactionsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Transactions_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactions_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transactions_ServiceDesc is the grpc.ServiceDesc for Transactions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transactions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Transactions",
	HandlerType: (*TransactionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _Transactions_CreateTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _Transactions_UpdateTransaction_Handler,
		},
		{
			MethodName: "DeleteTransaction",
			Handler:    _Transactions_DeleteTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _Transactions_GetTransaction_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _Transactions_ListTransactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncTransactions",
			Handler:       _Transactions_SyncTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/transactions.proto",
}
