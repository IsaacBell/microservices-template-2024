// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: v1/transactions.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTransactionsGetTransactions = "/api.v1.Transactions/GetTransactions"

type TransactionsHTTPServer interface {
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsReply, error)
}

func RegisterTransactionsHTTPServer(s *http.Server, srv TransactionsHTTPServer) {
	r := s.Route("/")
	r.GET("/users/{id}", _Transactions_GetTransactions0_HTTP_Handler(srv))
}

func _Transactions_GetTransactions0_HTTP_Handler(srv TransactionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTransactionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionsGetTransactions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTransactions(ctx, req.(*GetTransactionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTransactionsReply)
		return ctx.Result(200, reply)
	}
}

type TransactionsHTTPClient interface {
	GetTransactions(ctx context.Context, req *GetTransactionsRequest, opts ...http.CallOption) (rsp *GetTransactionsReply, err error)
}

type TransactionsHTTPClientImpl struct {
	cc *http.Client
}

func NewTransactionsHTTPClient(client *http.Client) TransactionsHTTPClient {
	return &TransactionsHTTPClientImpl{client}
}

func (c *TransactionsHTTPClientImpl) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...http.CallOption) (*GetTransactionsReply, error) {
	var out GetTransactionsReply
	pattern := "/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionsGetTransactions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
