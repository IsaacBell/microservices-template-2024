// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: v1/communications/communications.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Communications_CreateCommunications_FullMethodName = "/api.v1.Communications/CreateCommunications"
	Communications_UpdateCommunications_FullMethodName = "/api.v1.Communications/UpdateCommunications"
	Communications_DeleteCommunications_FullMethodName = "/api.v1.Communications/DeleteCommunications"
	Communications_GetCommunications_FullMethodName    = "/api.v1.Communications/GetCommunications"
	Communications_ListCommunications_FullMethodName   = "/api.v1.Communications/ListCommunications"
)

// CommunicationsClient is the client API for Communications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicationsClient interface {
	CreateCommunications(ctx context.Context, in *CreateCommunicationsRequest, opts ...grpc.CallOption) (*CreateCommunicationsReply, error)
	UpdateCommunications(ctx context.Context, in *UpdateCommunicationsRequest, opts ...grpc.CallOption) (*UpdateCommunicationsReply, error)
	DeleteCommunications(ctx context.Context, in *DeleteCommunicationsRequest, opts ...grpc.CallOption) (*DeleteCommunicationsReply, error)
	GetCommunications(ctx context.Context, in *GetCommunicationsRequest, opts ...grpc.CallOption) (*GetCommunicationsReply, error)
	ListCommunications(ctx context.Context, in *ListCommunicationsRequest, opts ...grpc.CallOption) (*ListCommunicationsReply, error)
}

type communicationsClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationsClient(cc grpc.ClientConnInterface) CommunicationsClient {
	return &communicationsClient{cc}
}

func (c *communicationsClient) CreateCommunications(ctx context.Context, in *CreateCommunicationsRequest, opts ...grpc.CallOption) (*CreateCommunicationsReply, error) {
	out := new(CreateCommunicationsReply)
	err := c.cc.Invoke(ctx, Communications_CreateCommunications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationsClient) UpdateCommunications(ctx context.Context, in *UpdateCommunicationsRequest, opts ...grpc.CallOption) (*UpdateCommunicationsReply, error) {
	out := new(UpdateCommunicationsReply)
	err := c.cc.Invoke(ctx, Communications_UpdateCommunications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationsClient) DeleteCommunications(ctx context.Context, in *DeleteCommunicationsRequest, opts ...grpc.CallOption) (*DeleteCommunicationsReply, error) {
	out := new(DeleteCommunicationsReply)
	err := c.cc.Invoke(ctx, Communications_DeleteCommunications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationsClient) GetCommunications(ctx context.Context, in *GetCommunicationsRequest, opts ...grpc.CallOption) (*GetCommunicationsReply, error) {
	out := new(GetCommunicationsReply)
	err := c.cc.Invoke(ctx, Communications_GetCommunications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationsClient) ListCommunications(ctx context.Context, in *ListCommunicationsRequest, opts ...grpc.CallOption) (*ListCommunicationsReply, error) {
	out := new(ListCommunicationsReply)
	err := c.cc.Invoke(ctx, Communications_ListCommunications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicationsServer is the server API for Communications service.
// All implementations must embed UnimplementedCommunicationsServer
// for forward compatibility
type CommunicationsServer interface {
	CreateCommunications(context.Context, *CreateCommunicationsRequest) (*CreateCommunicationsReply, error)
	UpdateCommunications(context.Context, *UpdateCommunicationsRequest) (*UpdateCommunicationsReply, error)
	DeleteCommunications(context.Context, *DeleteCommunicationsRequest) (*DeleteCommunicationsReply, error)
	GetCommunications(context.Context, *GetCommunicationsRequest) (*GetCommunicationsReply, error)
	ListCommunications(context.Context, *ListCommunicationsRequest) (*ListCommunicationsReply, error)
	mustEmbedUnimplementedCommunicationsServer()
}

// UnimplementedCommunicationsServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicationsServer struct {
}

func (UnimplementedCommunicationsServer) CreateCommunications(context.Context, *CreateCommunicationsRequest) (*CreateCommunicationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunications not implemented")
}
func (UnimplementedCommunicationsServer) UpdateCommunications(context.Context, *UpdateCommunicationsRequest) (*UpdateCommunicationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommunications not implemented")
}
func (UnimplementedCommunicationsServer) DeleteCommunications(context.Context, *DeleteCommunicationsRequest) (*DeleteCommunicationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunications not implemented")
}
func (UnimplementedCommunicationsServer) GetCommunications(context.Context, *GetCommunicationsRequest) (*GetCommunicationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunications not implemented")
}
func (UnimplementedCommunicationsServer) ListCommunications(context.Context, *ListCommunicationsRequest) (*ListCommunicationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunications not implemented")
}
func (UnimplementedCommunicationsServer) mustEmbedUnimplementedCommunicationsServer() {}

// UnsafeCommunicationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicationsServer will
// result in compilation errors.
type UnsafeCommunicationsServer interface {
	mustEmbedUnimplementedCommunicationsServer()
}

func RegisterCommunicationsServer(s grpc.ServiceRegistrar, srv CommunicationsServer) {
	s.RegisterService(&Communications_ServiceDesc, srv)
}

func _Communications_CreateCommunications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationsServer).CreateCommunications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communications_CreateCommunications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationsServer).CreateCommunications(ctx, req.(*CreateCommunicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communications_UpdateCommunications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommunicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationsServer).UpdateCommunications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communications_UpdateCommunications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationsServer).UpdateCommunications(ctx, req.(*UpdateCommunicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communications_DeleteCommunications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommunicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationsServer).DeleteCommunications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communications_DeleteCommunications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationsServer).DeleteCommunications(ctx, req.(*DeleteCommunicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communications_GetCommunications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationsServer).GetCommunications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communications_GetCommunications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationsServer).GetCommunications(ctx, req.(*GetCommunicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communications_ListCommunications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommunicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationsServer).ListCommunications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communications_ListCommunications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationsServer).ListCommunications(ctx, req.(*ListCommunicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Communications_ServiceDesc is the grpc.ServiceDesc for Communications service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Communications_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Communications",
	HandlerType: (*CommunicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommunications",
			Handler:    _Communications_CreateCommunications_Handler,
		},
		{
			MethodName: "UpdateCommunications",
			Handler:    _Communications_UpdateCommunications_Handler,
		},
		{
			MethodName: "DeleteCommunications",
			Handler:    _Communications_DeleteCommunications_Handler,
		},
		{
			MethodName: "GetCommunications",
			Handler:    _Communications_GetCommunications_Handler,
		},
		{
			MethodName: "ListCommunications",
			Handler:    _Communications_ListCommunications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/communications/communications.proto",
}
