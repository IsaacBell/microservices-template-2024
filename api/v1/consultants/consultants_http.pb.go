// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: v1/consultants/consultants.proto

package consultant

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConsultantsCreateConsultant = "/Consultants.Consultants/CreateConsultant"
const OperationConsultantsDeleteConsultant = "/Consultants.Consultants/DeleteConsultant"
const OperationConsultantsGetConsultant = "/Consultants.Consultants/GetConsultant"
const OperationConsultantsListConsultants = "/Consultants.Consultants/ListConsultants"
const OperationConsultantsSendComm = "/Consultants.Consultants/SendComm"
const OperationConsultantsUpdateConsultant = "/Consultants.Consultants/UpdateConsultant"

type ConsultantsHTTPServer interface {
	CreateConsultant(context.Context, *CreateConsultantRequest) (*CreateConsultantReply, error)
	DeleteConsultant(context.Context, *DeleteConsultantRequest) (*DeleteConsultantReply, error)
	GetConsultant(context.Context, *GetConsultantRequest) (*GetConsultantReply, error)
	ListConsultants(context.Context, *ListConsultantsRequest) (*ListConsultantsReply, error)
	SendComm(context.Context, *SendCommsRequest) (*SendCommsReply, error)
	UpdateConsultant(context.Context, *UpdateConsultantRequest) (*UpdateConsultantReply, error)
}

func RegisterConsultantsHTTPServer(s *http.Server, srv ConsultantsHTTPServer) {
	r := s.Route("/")
	r.POST("/consultants", _Consultants_CreateConsultant0_HTTP_Handler(srv))
	r.PUT("/consultants/{consultant.id}", _Consultants_UpdateConsultant0_HTTP_Handler(srv))
	r.DELETE("/consultants/{id}", _Consultants_DeleteConsultant0_HTTP_Handler(srv))
	r.GET("/consultants/{id}", _Consultants_GetConsultant0_HTTP_Handler(srv))
	r.GET("/consultants", _Consultants_ListConsultants0_HTTP_Handler(srv))
	r.POST("/comms", _Consultants_SendComm0_HTTP_Handler(srv))
}

func _Consultants_CreateConsultant0_HTTP_Handler(srv ConsultantsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateConsultantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultantsCreateConsultant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateConsultant(ctx, req.(*CreateConsultantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateConsultantReply)
		return ctx.Result(200, reply)
	}
}

func _Consultants_UpdateConsultant0_HTTP_Handler(srv ConsultantsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateConsultantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultantsUpdateConsultant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateConsultant(ctx, req.(*UpdateConsultantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateConsultantReply)
		return ctx.Result(200, reply)
	}
}

func _Consultants_DeleteConsultant0_HTTP_Handler(srv ConsultantsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteConsultantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultantsDeleteConsultant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteConsultant(ctx, req.(*DeleteConsultantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteConsultantReply)
		return ctx.Result(200, reply)
	}
}

func _Consultants_GetConsultant0_HTTP_Handler(srv ConsultantsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConsultantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultantsGetConsultant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConsultant(ctx, req.(*GetConsultantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetConsultantReply)
		return ctx.Result(200, reply)
	}
}

func _Consultants_ListConsultants0_HTTP_Handler(srv ConsultantsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListConsultantsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultantsListConsultants)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListConsultants(ctx, req.(*ListConsultantsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListConsultantsReply)
		return ctx.Result(200, reply)
	}
}

func _Consultants_SendComm0_HTTP_Handler(srv ConsultantsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendCommsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultantsSendComm)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendComm(ctx, req.(*SendCommsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendCommsReply)
		return ctx.Result(200, reply)
	}
}

type ConsultantsHTTPClient interface {
	CreateConsultant(ctx context.Context, req *CreateConsultantRequest, opts ...http.CallOption) (rsp *CreateConsultantReply, err error)
	DeleteConsultant(ctx context.Context, req *DeleteConsultantRequest, opts ...http.CallOption) (rsp *DeleteConsultantReply, err error)
	GetConsultant(ctx context.Context, req *GetConsultantRequest, opts ...http.CallOption) (rsp *GetConsultantReply, err error)
	ListConsultants(ctx context.Context, req *ListConsultantsRequest, opts ...http.CallOption) (rsp *ListConsultantsReply, err error)
	SendComm(ctx context.Context, req *SendCommsRequest, opts ...http.CallOption) (rsp *SendCommsReply, err error)
	UpdateConsultant(ctx context.Context, req *UpdateConsultantRequest, opts ...http.CallOption) (rsp *UpdateConsultantReply, err error)
}

type ConsultantsHTTPClientImpl struct {
	cc *http.Client
}

func NewConsultantsHTTPClient(client *http.Client) ConsultantsHTTPClient {
	return &ConsultantsHTTPClientImpl{client}
}

func (c *ConsultantsHTTPClientImpl) CreateConsultant(ctx context.Context, in *CreateConsultantRequest, opts ...http.CallOption) (*CreateConsultantReply, error) {
	var out CreateConsultantReply
	pattern := "/consultants"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsultantsCreateConsultant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultantsHTTPClientImpl) DeleteConsultant(ctx context.Context, in *DeleteConsultantRequest, opts ...http.CallOption) (*DeleteConsultantReply, error) {
	var out DeleteConsultantReply
	pattern := "/consultants/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsultantsDeleteConsultant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultantsHTTPClientImpl) GetConsultant(ctx context.Context, in *GetConsultantRequest, opts ...http.CallOption) (*GetConsultantReply, error) {
	var out GetConsultantReply
	pattern := "/consultants/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsultantsGetConsultant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultantsHTTPClientImpl) ListConsultants(ctx context.Context, in *ListConsultantsRequest, opts ...http.CallOption) (*ListConsultantsReply, error) {
	var out ListConsultantsReply
	pattern := "/consultants"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsultantsListConsultants))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultantsHTTPClientImpl) SendComm(ctx context.Context, in *SendCommsRequest, opts ...http.CallOption) (*SendCommsReply, error) {
	var out SendCommsReply
	pattern := "/comms"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsultantsSendComm))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultantsHTTPClientImpl) UpdateConsultant(ctx context.Context, in *UpdateConsultantRequest, opts ...http.CallOption) (*UpdateConsultantReply, error) {
	var out UpdateConsultantReply
	pattern := "/consultants/{consultant.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsultantsUpdateConsultant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
