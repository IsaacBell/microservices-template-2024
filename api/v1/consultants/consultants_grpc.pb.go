// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: v1/consultants/consultants.proto

package consultant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Consultants_CreateConsultant_FullMethodName = "/api.v1.consultants.Consultants/CreateConsultant"
	Consultants_UpdateConsultant_FullMethodName = "/api.v1.consultants.Consultants/UpdateConsultant"
	Consultants_DeleteConsultant_FullMethodName = "/api.v1.consultants.Consultants/DeleteConsultant"
	Consultants_GetConsultant_FullMethodName    = "/api.v1.consultants.Consultants/GetConsultant"
	Consultants_ListConsultants_FullMethodName  = "/api.v1.consultants.Consultants/ListConsultants"
	Consultants_SendComm_FullMethodName         = "/api.v1.consultants.Consultants/SendComm"
)

// ConsultantsClient is the client API for Consultants service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsultantsClient interface {
	CreateConsultant(ctx context.Context, in *CreateConsultantRequest, opts ...grpc.CallOption) (*CreateConsultantReply, error)
	UpdateConsultant(ctx context.Context, in *UpdateConsultantRequest, opts ...grpc.CallOption) (*UpdateConsultantReply, error)
	DeleteConsultant(ctx context.Context, in *DeleteConsultantRequest, opts ...grpc.CallOption) (*DeleteConsultantReply, error)
	GetConsultant(ctx context.Context, in *GetConsultantRequest, opts ...grpc.CallOption) (*GetConsultantReply, error)
	ListConsultants(ctx context.Context, in *ListConsultantsRequest, opts ...grpc.CallOption) (*ListConsultantsReply, error)
	SendComm(ctx context.Context, in *SendCommsRequest, opts ...grpc.CallOption) (*SendCommsReply, error)
}

type consultantsClient struct {
	cc grpc.ClientConnInterface
}

func NewConsultantsClient(cc grpc.ClientConnInterface) ConsultantsClient {
	return &consultantsClient{cc}
}

func (c *consultantsClient) CreateConsultant(ctx context.Context, in *CreateConsultantRequest, opts ...grpc.CallOption) (*CreateConsultantReply, error) {
	out := new(CreateConsultantReply)
	err := c.cc.Invoke(ctx, Consultants_CreateConsultant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultantsClient) UpdateConsultant(ctx context.Context, in *UpdateConsultantRequest, opts ...grpc.CallOption) (*UpdateConsultantReply, error) {
	out := new(UpdateConsultantReply)
	err := c.cc.Invoke(ctx, Consultants_UpdateConsultant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultantsClient) DeleteConsultant(ctx context.Context, in *DeleteConsultantRequest, opts ...grpc.CallOption) (*DeleteConsultantReply, error) {
	out := new(DeleteConsultantReply)
	err := c.cc.Invoke(ctx, Consultants_DeleteConsultant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultantsClient) GetConsultant(ctx context.Context, in *GetConsultantRequest, opts ...grpc.CallOption) (*GetConsultantReply, error) {
	out := new(GetConsultantReply)
	err := c.cc.Invoke(ctx, Consultants_GetConsultant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultantsClient) ListConsultants(ctx context.Context, in *ListConsultantsRequest, opts ...grpc.CallOption) (*ListConsultantsReply, error) {
	out := new(ListConsultantsReply)
	err := c.cc.Invoke(ctx, Consultants_ListConsultants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultantsClient) SendComm(ctx context.Context, in *SendCommsRequest, opts ...grpc.CallOption) (*SendCommsReply, error) {
	out := new(SendCommsReply)
	err := c.cc.Invoke(ctx, Consultants_SendComm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsultantsServer is the server API for Consultants service.
// All implementations must embed UnimplementedConsultantsServer
// for forward compatibility
type ConsultantsServer interface {
	CreateConsultant(context.Context, *CreateConsultantRequest) (*CreateConsultantReply, error)
	UpdateConsultant(context.Context, *UpdateConsultantRequest) (*UpdateConsultantReply, error)
	DeleteConsultant(context.Context, *DeleteConsultantRequest) (*DeleteConsultantReply, error)
	GetConsultant(context.Context, *GetConsultantRequest) (*GetConsultantReply, error)
	ListConsultants(context.Context, *ListConsultantsRequest) (*ListConsultantsReply, error)
	SendComm(context.Context, *SendCommsRequest) (*SendCommsReply, error)
	mustEmbedUnimplementedConsultantsServer()
}

// UnimplementedConsultantsServer must be embedded to have forward compatible implementations.
type UnimplementedConsultantsServer struct {
}

func (UnimplementedConsultantsServer) CreateConsultant(context.Context, *CreateConsultantRequest) (*CreateConsultantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsultant not implemented")
}
func (UnimplementedConsultantsServer) UpdateConsultant(context.Context, *UpdateConsultantRequest) (*UpdateConsultantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsultant not implemented")
}
func (UnimplementedConsultantsServer) DeleteConsultant(context.Context, *DeleteConsultantRequest) (*DeleteConsultantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsultant not implemented")
}
func (UnimplementedConsultantsServer) GetConsultant(context.Context, *GetConsultantRequest) (*GetConsultantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsultant not implemented")
}
func (UnimplementedConsultantsServer) ListConsultants(context.Context, *ListConsultantsRequest) (*ListConsultantsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsultants not implemented")
}
func (UnimplementedConsultantsServer) SendComm(context.Context, *SendCommsRequest) (*SendCommsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendComm not implemented")
}
func (UnimplementedConsultantsServer) mustEmbedUnimplementedConsultantsServer() {}

// UnsafeConsultantsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsultantsServer will
// result in compilation errors.
type UnsafeConsultantsServer interface {
	mustEmbedUnimplementedConsultantsServer()
}

func RegisterConsultantsServer(s grpc.ServiceRegistrar, srv ConsultantsServer) {
	s.RegisterService(&Consultants_ServiceDesc, srv)
}

func _Consultants_CreateConsultant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsultantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultantsServer).CreateConsultant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultants_CreateConsultant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultantsServer).CreateConsultant(ctx, req.(*CreateConsultantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultants_UpdateConsultant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsultantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultantsServer).UpdateConsultant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultants_UpdateConsultant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultantsServer).UpdateConsultant(ctx, req.(*UpdateConsultantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultants_DeleteConsultant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsultantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultantsServer).DeleteConsultant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultants_DeleteConsultant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultantsServer).DeleteConsultant(ctx, req.(*DeleteConsultantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultants_GetConsultant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsultantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultantsServer).GetConsultant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultants_GetConsultant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultantsServer).GetConsultant(ctx, req.(*GetConsultantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultants_ListConsultants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsultantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultantsServer).ListConsultants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultants_ListConsultants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultantsServer).ListConsultants(ctx, req.(*ListConsultantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultants_SendComm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultantsServer).SendComm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultants_SendComm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultantsServer).SendComm(ctx, req.(*SendCommsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Consultants_ServiceDesc is the grpc.ServiceDesc for Consultants service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consultants_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.consultants.Consultants",
	HandlerType: (*ConsultantsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConsultant",
			Handler:    _Consultants_CreateConsultant_Handler,
		},
		{
			MethodName: "UpdateConsultant",
			Handler:    _Consultants_UpdateConsultant_Handler,
		},
		{
			MethodName: "DeleteConsultant",
			Handler:    _Consultants_DeleteConsultant_Handler,
		},
		{
			MethodName: "GetConsultant",
			Handler:    _Consultants_GetConsultant_Handler,
		},
		{
			MethodName: "ListConsultants",
			Handler:    _Consultants_ListConsultants_Handler,
		},
		{
			MethodName: "SendComm",
			Handler:    _Consultants_SendComm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/consultants/consultants.proto",
}
