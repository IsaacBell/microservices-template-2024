// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: v1/b2b/lead.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCompaniesCreateCompany = "/api.v1.Companies/CreateCompany"
const OperationCompaniesDeleteCompany = "/api.v1.Companies/DeleteCompany"
const OperationCompaniesGetCompany = "/api.v1.Companies/GetCompany"
const OperationCompaniesListCompanys = "/api.v1.Companies/ListCompanys"

type CompaniesHTTPServer interface {
	CreateCompany(context.Context, *CreateCompanyRequest) (*CreateCompanyReply, error)
	DeleteCompany(context.Context, *DeleteCompanyRequest) (*DeleteCompanyReply, error)
	GetCompany(context.Context, *GetCompanyRequest) (*GetCompanyReply, error)
	ListCompanys(context.Context, *ListCompaniesRequest) (*ListCompaniesReply, error)
}

func RegisterCompaniesHTTPServer(s *http.Server, srv CompaniesHTTPServer) {
	r := s.Route("/")
	r.GET("/company/{id}", _Companies_GetCompany0_HTTP_Handler(srv))
	r.POST("/lead", _Companies_CreateCompany0_HTTP_Handler(srv))
	r.DELETE("/lead/{id}", _Companies_DeleteCompany0_HTTP_Handler(srv))
	r.GET("/companies", _Companies_ListCompanys0_HTTP_Handler(srv))
}

func _Companies_GetCompany0_HTTP_Handler(srv CompaniesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCompanyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCompaniesGetCompany)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCompany(ctx, req.(*GetCompanyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCompanyReply)
		return ctx.Result(200, reply)
	}
}

func _Companies_CreateCompany0_HTTP_Handler(srv CompaniesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCompanyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCompaniesCreateCompany)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCompany(ctx, req.(*CreateCompanyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCompanyReply)
		return ctx.Result(200, reply)
	}
}

func _Companies_DeleteCompany0_HTTP_Handler(srv CompaniesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCompanyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCompaniesDeleteCompany)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCompany(ctx, req.(*DeleteCompanyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCompanyReply)
		return ctx.Result(200, reply)
	}
}

func _Companies_ListCompanys0_HTTP_Handler(srv CompaniesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCompaniesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCompaniesListCompanys)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCompanys(ctx, req.(*ListCompaniesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCompaniesReply)
		return ctx.Result(200, reply)
	}
}

type CompaniesHTTPClient interface {
	CreateCompany(ctx context.Context, req *CreateCompanyRequest, opts ...http.CallOption) (rsp *CreateCompanyReply, err error)
	DeleteCompany(ctx context.Context, req *DeleteCompanyRequest, opts ...http.CallOption) (rsp *DeleteCompanyReply, err error)
	GetCompany(ctx context.Context, req *GetCompanyRequest, opts ...http.CallOption) (rsp *GetCompanyReply, err error)
	ListCompanys(ctx context.Context, req *ListCompaniesRequest, opts ...http.CallOption) (rsp *ListCompaniesReply, err error)
}

type CompaniesHTTPClientImpl struct {
	cc *http.Client
}

func NewCompaniesHTTPClient(client *http.Client) CompaniesHTTPClient {
	return &CompaniesHTTPClientImpl{client}
}

func (c *CompaniesHTTPClientImpl) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...http.CallOption) (*CreateCompanyReply, error) {
	var out CreateCompanyReply
	pattern := "/lead"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCompaniesCreateCompany))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CompaniesHTTPClientImpl) DeleteCompany(ctx context.Context, in *DeleteCompanyRequest, opts ...http.CallOption) (*DeleteCompanyReply, error) {
	var out DeleteCompanyReply
	pattern := "/lead/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCompaniesDeleteCompany))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CompaniesHTTPClientImpl) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...http.CallOption) (*GetCompanyReply, error) {
	var out GetCompanyReply
	pattern := "/company/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCompaniesGetCompany))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CompaniesHTTPClientImpl) ListCompanys(ctx context.Context, in *ListCompaniesRequest, opts ...http.CallOption) (*ListCompaniesReply, error) {
	var out ListCompaniesReply
	pattern := "/companies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCompaniesListCompanys))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationLeadsCreateLead = "/api.v1.Leads/CreateLead"
const OperationLeadsDeleteLead = "/api.v1.Leads/DeleteLead"
const OperationLeadsGetLead = "/api.v1.Leads/GetLead"
const OperationLeadsListLeads = "/api.v1.Leads/ListLeads"

type LeadsHTTPServer interface {
	CreateLead(context.Context, *CreateLeadRequest) (*CreateLeadReply, error)
	DeleteLead(context.Context, *DeleteLeadRequest) (*DeleteLeadReply, error)
	GetLead(context.Context, *GetLeadRequest) (*GetLeadReply, error)
	ListLeads(context.Context, *ListLeadsRequest) (*ListLeadsReply, error)
}

func RegisterLeadsHTTPServer(s *http.Server, srv LeadsHTTPServer) {
	r := s.Route("/")
	r.POST("/lead", _Leads_CreateLead0_HTTP_Handler(srv))
	r.DELETE("/lead/{id}", _Leads_DeleteLead0_HTTP_Handler(srv))
	r.GET("/lead/{id}", _Leads_GetLead0_HTTP_Handler(srv))
	r.GET("/leads", _Leads_ListLeads0_HTTP_Handler(srv))
}

func _Leads_CreateLead0_HTTP_Handler(srv LeadsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLeadRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeadsCreateLead)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLead(ctx, req.(*CreateLeadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateLeadReply)
		return ctx.Result(200, reply)
	}
}

func _Leads_DeleteLead0_HTTP_Handler(srv LeadsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLeadRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeadsDeleteLead)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLead(ctx, req.(*DeleteLeadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteLeadReply)
		return ctx.Result(200, reply)
	}
}

func _Leads_GetLead0_HTTP_Handler(srv LeadsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLeadRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeadsGetLead)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLead(ctx, req.(*GetLeadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLeadReply)
		return ctx.Result(200, reply)
	}
}

func _Leads_ListLeads0_HTTP_Handler(srv LeadsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLeadsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeadsListLeads)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLeads(ctx, req.(*ListLeadsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLeadsReply)
		return ctx.Result(200, reply)
	}
}

type LeadsHTTPClient interface {
	CreateLead(ctx context.Context, req *CreateLeadRequest, opts ...http.CallOption) (rsp *CreateLeadReply, err error)
	DeleteLead(ctx context.Context, req *DeleteLeadRequest, opts ...http.CallOption) (rsp *DeleteLeadReply, err error)
	GetLead(ctx context.Context, req *GetLeadRequest, opts ...http.CallOption) (rsp *GetLeadReply, err error)
	ListLeads(ctx context.Context, req *ListLeadsRequest, opts ...http.CallOption) (rsp *ListLeadsReply, err error)
}

type LeadsHTTPClientImpl struct {
	cc *http.Client
}

func NewLeadsHTTPClient(client *http.Client) LeadsHTTPClient {
	return &LeadsHTTPClientImpl{client}
}

func (c *LeadsHTTPClientImpl) CreateLead(ctx context.Context, in *CreateLeadRequest, opts ...http.CallOption) (*CreateLeadReply, error) {
	var out CreateLeadReply
	pattern := "/lead"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeadsCreateLead))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LeadsHTTPClientImpl) DeleteLead(ctx context.Context, in *DeleteLeadRequest, opts ...http.CallOption) (*DeleteLeadReply, error) {
	var out DeleteLeadReply
	pattern := "/lead/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeadsDeleteLead))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LeadsHTTPClientImpl) GetLead(ctx context.Context, in *GetLeadRequest, opts ...http.CallOption) (*GetLeadReply, error) {
	var out GetLeadReply
	pattern := "/lead/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeadsGetLead))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LeadsHTTPClientImpl) ListLeads(ctx context.Context, in *ListLeadsRequest, opts ...http.CallOption) (*ListLeadsReply, error) {
	var out ListLeadsReply
	pattern := "/leads"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeadsListLeads))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
