// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: v1/marketplace/marketplace.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Marketplace_CreateMarketplace_FullMethodName  = "/api.v1.marketplace.Marketplace/CreateMarketplace"
	Marketplace_GetMarketplace_FullMethodName     = "/api.v1.marketplace.Marketplace/GetMarketplace"
	Marketplace_ListMarketplaces_FullMethodName   = "/api.v1.marketplace.Marketplace/ListMarketplaces"
	Marketplace_CategoriesMenu_FullMethodName     = "/api.v1.marketplace.Marketplace/CategoriesMenu"
	Marketplace_CategoryBreadcrumb_FullMethodName = "/api.v1.marketplace.Marketplace/CategoryBreadcrumb"
	Marketplace_CategoriesSideMenu_FullMethodName = "/api.v1.marketplace.Marketplace/CategoriesSideMenu"
)

// MarketplaceClient is the client API for Marketplace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketplaceClient interface {
	CreateMarketplace(ctx context.Context, in *CreateMarketplaceRequest, opts ...grpc.CallOption) (*CreateMarketplaceReply, error)
	GetMarketplace(ctx context.Context, in *GetMarketplaceRequest, opts ...grpc.CallOption) (*GetMarketplaceReply, error)
	ListMarketplaces(ctx context.Context, in *ListMarketplacesRequest, opts ...grpc.CallOption) (*ListMarketplacesReply, error)
	CategoriesMenu(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoriesMenuResponse, error)
	CategoryBreadcrumb(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoriesMenuResponse, error)
	CategoriesSideMenu(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoriesMenuResponse, error)
}

type marketplaceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketplaceClient(cc grpc.ClientConnInterface) MarketplaceClient {
	return &marketplaceClient{cc}
}

func (c *marketplaceClient) CreateMarketplace(ctx context.Context, in *CreateMarketplaceRequest, opts ...grpc.CallOption) (*CreateMarketplaceReply, error) {
	out := new(CreateMarketplaceReply)
	err := c.cc.Invoke(ctx, Marketplace_CreateMarketplace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) GetMarketplace(ctx context.Context, in *GetMarketplaceRequest, opts ...grpc.CallOption) (*GetMarketplaceReply, error) {
	out := new(GetMarketplaceReply)
	err := c.cc.Invoke(ctx, Marketplace_GetMarketplace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) ListMarketplaces(ctx context.Context, in *ListMarketplacesRequest, opts ...grpc.CallOption) (*ListMarketplacesReply, error) {
	out := new(ListMarketplacesReply)
	err := c.cc.Invoke(ctx, Marketplace_ListMarketplaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) CategoriesMenu(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoriesMenuResponse, error) {
	out := new(CategoriesMenuResponse)
	err := c.cc.Invoke(ctx, Marketplace_CategoriesMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) CategoryBreadcrumb(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoriesMenuResponse, error) {
	out := new(CategoriesMenuResponse)
	err := c.cc.Invoke(ctx, Marketplace_CategoryBreadcrumb_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) CategoriesSideMenu(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoriesMenuResponse, error) {
	out := new(CategoriesMenuResponse)
	err := c.cc.Invoke(ctx, Marketplace_CategoriesSideMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketplaceServer is the server API for Marketplace service.
// All implementations must embed UnimplementedMarketplaceServer
// for forward compatibility
type MarketplaceServer interface {
	CreateMarketplace(context.Context, *CreateMarketplaceRequest) (*CreateMarketplaceReply, error)
	GetMarketplace(context.Context, *GetMarketplaceRequest) (*GetMarketplaceReply, error)
	ListMarketplaces(context.Context, *ListMarketplacesRequest) (*ListMarketplacesReply, error)
	CategoriesMenu(context.Context, *emptypb.Empty) (*CategoriesMenuResponse, error)
	CategoryBreadcrumb(context.Context, *CategoryRequest) (*CategoriesMenuResponse, error)
	CategoriesSideMenu(context.Context, *CategoryRequest) (*CategoriesMenuResponse, error)
	mustEmbedUnimplementedMarketplaceServer()
}

// UnimplementedMarketplaceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketplaceServer struct {
}

func (UnimplementedMarketplaceServer) CreateMarketplace(context.Context, *CreateMarketplaceRequest) (*CreateMarketplaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMarketplace not implemented")
}
func (UnimplementedMarketplaceServer) GetMarketplace(context.Context, *GetMarketplaceRequest) (*GetMarketplaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketplace not implemented")
}
func (UnimplementedMarketplaceServer) ListMarketplaces(context.Context, *ListMarketplacesRequest) (*ListMarketplacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarketplaces not implemented")
}
func (UnimplementedMarketplaceServer) CategoriesMenu(context.Context, *emptypb.Empty) (*CategoriesMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoriesMenu not implemented")
}
func (UnimplementedMarketplaceServer) CategoryBreadcrumb(context.Context, *CategoryRequest) (*CategoriesMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryBreadcrumb not implemented")
}
func (UnimplementedMarketplaceServer) CategoriesSideMenu(context.Context, *CategoryRequest) (*CategoriesMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoriesSideMenu not implemented")
}
func (UnimplementedMarketplaceServer) mustEmbedUnimplementedMarketplaceServer() {}

// UnsafeMarketplaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketplaceServer will
// result in compilation errors.
type UnsafeMarketplaceServer interface {
	mustEmbedUnimplementedMarketplaceServer()
}

func RegisterMarketplaceServer(s grpc.ServiceRegistrar, srv MarketplaceServer) {
	s.RegisterService(&Marketplace_ServiceDesc, srv)
}

func _Marketplace_CreateMarketplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMarketplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).CreateMarketplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Marketplace_CreateMarketplace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).CreateMarketplace(ctx, req.(*CreateMarketplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_GetMarketplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).GetMarketplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Marketplace_GetMarketplace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).GetMarketplace(ctx, req.(*GetMarketplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_ListMarketplaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarketplacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).ListMarketplaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Marketplace_ListMarketplaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).ListMarketplaces(ctx, req.(*ListMarketplacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_CategoriesMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).CategoriesMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Marketplace_CategoriesMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).CategoriesMenu(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_CategoryBreadcrumb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).CategoryBreadcrumb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Marketplace_CategoryBreadcrumb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).CategoryBreadcrumb(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_CategoriesSideMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).CategoriesSideMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Marketplace_CategoriesSideMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).CategoriesSideMenu(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Marketplace_ServiceDesc is the grpc.ServiceDesc for Marketplace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Marketplace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.marketplace.Marketplace",
	HandlerType: (*MarketplaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMarketplace",
			Handler:    _Marketplace_CreateMarketplace_Handler,
		},
		{
			MethodName: "GetMarketplace",
			Handler:    _Marketplace_GetMarketplace_Handler,
		},
		{
			MethodName: "ListMarketplaces",
			Handler:    _Marketplace_ListMarketplaces_Handler,
		},
		{
			MethodName: "CategoriesMenu",
			Handler:    _Marketplace_CategoriesMenu_Handler,
		},
		{
			MethodName: "CategoryBreadcrumb",
			Handler:    _Marketplace_CategoryBreadcrumb_Handler,
		},
		{
			MethodName: "CategoriesSideMenu",
			Handler:    _Marketplace_CategoriesSideMenu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/marketplace/marketplace.proto",
}
