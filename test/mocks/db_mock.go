// Code generated by MockGen. DO NOT EDIT.
// Source: internal/data/db.go

package mock_data

import (
	reflect "reflect"

	biz "microservices-template-2024/internal/biz"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// First mocks base method.
func (m *MockDB) First(arg0 interface{}, arg1 ...interface{}) *MockDB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*MockDB)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockDBMockRecorder) First(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockDB)(nil).First), varargs...)
}

// FirstOrCreate mocks base method.
func (m *MockDB) FirstOrCreate(arg0 interface{}) *MockDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstOrCreate", arg0)
	ret0, _ := ret[0].(*MockDB)
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate.
func (mr *MockDBMockRecorder) FirstOrCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockDB)(nil).FirstOrCreate), arg0)
}

// Last mocks base method.
func (m *MockDB) Last(arg0 interface{}) *MockDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", arg0)
	ret0, _ := ret[0].(*MockDB)
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockDBMockRecorder) Last(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockDB)(nil).Last), arg0)
}

// Limit mocks base method.
func (m *MockDB) Limit(arg0 int) *MockDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", arg0)
	ret0, _ := ret[0].(*MockDB)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockDBMockRecorder) Limit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockDB)(nil).Limit), arg0)
}

// Save mocks base method.
func (m *MockDB) Save(arg0 interface{}) *MockDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*MockDB)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDBMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDB)(nil).Save), arg0)
}

// Where mocks base method.
func (m *MockDB) Where(arg0 interface{}, arg1 ...interface{}) *MockDB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*MockDB)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockDBMockRecorder) Where(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockDB)(nil).Where), varargs...)
}