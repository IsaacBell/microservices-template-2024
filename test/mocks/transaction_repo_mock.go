// Code generated by MockGen. DO NOT EDIT.
// Source: internal/biz/transaction.go

package mock_biz

import (
	context "context"
	reflect "reflect"

	v1 "microservices-template-2024/api/v1"
	biz "microservices-template-2024/internal/biz"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionRepo is a mock of TransactionRepo interface.
type MockTransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepoMockRecorder
}

// MockTransactionRepoMockRecorder is the mock recorder for MockTransactionRepo.
type MockTransactionRepoMockRecorder struct {
	mock *MockTransactionRepo
}

// NewMockTransactionRepo creates a new mock instance.
func NewMockTransactionRepo(ctrl *gomock.Controller) *MockTransactionRepo {
	mock := &MockTransactionRepo{ctrl: ctrl}
	mock.recorder = &MockTransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepo) EXPECT() *MockTransactionRepoMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockTransactionRepo) FindByID(arg0 context.Context, arg1 string) (*biz.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*biz.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTransactionRepoMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTransactionRepo)(nil).FindByID), arg0, arg1)
}

// ListAll mocks base method.
func (m *MockTransactionRepo) ListAll(arg0 context.Context) ([]*biz.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0)
	ret0, _ := ret[0].([]*biz.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockTransactionRepoMockRecorder) ListAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockTransactionRepo)(nil).ListAll), arg0)
}

// Save mocks base method.
func (m *MockTransactionRepo) Save(arg0 context.Context, arg1 *biz.Transaction) (*biz.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(*biz.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockTransactionRepoMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTransactionRepo)(nil).Save), arg0, arg1)
}

// SyncTransactions mocks base method.
func (m *MockTransactionRepo) SyncTransactions(arg0 context.Context, arg1 string, arg2 v1.Transactions_SyncTransactionsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncTransactions", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncTransactions indicates an expected call of SyncTransactions.
func (mr *MockTransactionRepoMockRecorder) SyncTransactions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncTransactions", reflect.TypeOf((*MockTransactionRepo)(nil).SyncTransactions), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockTransactionRepo) Update(arg0 context.Context, arg1 *biz.Transaction) (*biz.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*biz.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTransactionRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionRepo)(nil).Update), arg0, arg1)
}